{"version":3,"sources":["pages/Header.js","pages/Page.js","pages/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Page","state","currency","result","currencyValue1","currencyValue2","inputValue","inputValueAsync","API","_this","handleCalc","_this$state","currency2","rates","setState","toFixed","handleValueChange","e","target","value","handleChangeValue1","handleChangeValue2","handleChangeCurrencies","currency1","_this2","this","fetch","then","response","json","_this3","api","concat","className","type","onChange","id","onClick","key","date","Component","App","react_router_dom","pages_Header","pages_Page","Boolean","window","location","hostname","match","ReactDOM","render","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAWeA,eARA,WACX,OACIC,EAAAC,EAAAC,cAAA,uCC+JOC,0NA3JXC,MAAQ,CACJC,SAAU,GACVC,OAAO,GACPC,eAAe,MACfC,eAAe,MACfC,WAAW,EACXC,gBAAgB,MAIpBC,0DAAqDC,EAAKR,MAAMG,kBAIhEM,WAAa,WAAM,IAAAC,EACqBF,EAAKR,MAAlCK,EADQK,EACRL,WAEDM,EAHSD,EACGN,eAKZF,EAFWM,EAAKR,MAAMC,SAASW,MAAMD,GAEjBN,EAE1BG,EAAKK,SAAS,CACVX,OAAQA,EAAOY,QAAQ,GACvBR,gBAAgBD,OAQxBU,kBAAoB,SAACC,GACjBR,EAAKK,SAAS,CACVR,WAAWW,EAAEC,OAAOC,WAI5BC,mBAAqB,SAACH,GAClBR,EAAKK,SAAS,CACVV,eAAea,EAAEC,OAAOC,MACxBhB,OAAO,GACPI,gBAAgB,QAGxBc,mBAAqB,SAACJ,GAClBR,EAAKK,SAAS,CACVT,eAAeY,EAAEC,OAAOC,MACxBhB,OAAO,GACPI,gBAAgB,QAIxBe,uBAAyB,WACrB,IAAMC,EAAYd,EAAKR,MAAMG,eACvBQ,EAAYH,EAAKR,MAAMI,eAE7BI,EAAKK,SAAS,CACVV,eAAgBQ,EAChBP,eAAgBkB,EAChBpB,OAAO,GACPI,gBAAgB,yFAML,IAAAiB,EAAAC,KACfC,MAAMD,KAAKjB,KACVmB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACFJ,EAAKV,SAAS,CACVZ,SAAS0B,mDAOD,IAAAE,EAAAL,KACVM,EAAG,+CAAAC,OAAkDP,KAAKxB,MAAMG,gBACtEsB,MAAMK,GACLJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACFE,EAAKhB,SAAS,CACVZ,SAAS0B,uCASjB,OACI/B,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,aACXpC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,QACXpC,EAAAC,EAAAC,cAAA,uBAGAF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAASf,MAAOM,KAAKxB,MAAMK,WAAY6B,SAAUV,KAAKT,oBAClEnB,EAAAC,EAAAC,cAAA,qBAIAF,EAAAC,EAAAC,cAAA,UAAQoC,SAAUV,KAAKL,mBAAoBgB,GAAG,YAAYjB,MAAOM,KAAKxB,MAAMG,gBACxEP,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,OAAd,OAGAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,OAAd,OAGAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,OAAd,OAGAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,OAAd,OAGAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,OAAd,QAKJtB,EAAAC,EAAAC,cAAA,UAAQsC,QAASZ,KAAKH,uBAAwBW,UAAU,UAAxD,UAEApC,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,UAAQoC,SAAUV,KAAKJ,mBAAoBF,MAAOM,KAAKxB,MAAMI,gBACzDR,EAAAC,EAAAC,cAAA,UAAQuC,IAAI,MAAMnB,MAAM,OAAxB,OAGAtB,EAAAC,EAAAC,cAAA,UAAQuC,IAAI,MAAMnB,MAAM,OAAxB,OACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,OAAd,OAGAtB,EAAAC,EAAAC,cAAA,UAAQuC,IAAI,MAAMnB,MAAM,OAAxB,OAGAtB,EAAAC,EAAAC,cAAA,UAAQuC,IAAI,MAAMnB,MAAM,OAAxB,QAIJtB,EAAAC,EAAAC,cAAA,UAAQsC,QAASZ,KAAKf,YAAtB,YAEJb,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,eACXpC,EAAAC,EAAAC,cAAA,UAAK0B,KAAKxB,MAAMM,gBAAhB,IAAuD,KAArBkB,KAAKxB,MAAME,OAAesB,KAAKxB,MAAMG,eAAe,KAAtF,IAAkH,KAArBqB,KAAKxB,MAAME,OAAe,MAAM,KAA7H,IAAoIsB,KAAKxB,MAAME,OAA/I,IAA6K,KAArBsB,KAAKxB,MAAME,OAAesB,KAAKxB,MAAMI,eAAe,OAEhNR,EAAAC,EAAAC,cAAA,KAAGkC,UAAU,QAAb,cAAgCR,KAAKxB,MAAMC,SAASqC,cArJjDC,cCYJC,mLAZX,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAD,eANQJ,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.74ab304a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Header.css'\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <header>\r\n            Currency calculator\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Header;","import React, {Component} from 'react';\r\nimport '../styles/Page.css';\r\nimport '../styles/mobile.css';\r\n// import PolishFlag from '../flags/flag_gbr.png';\r\n// const apiPLN = 'https://api.exchangeratesapi.io/latest?base=PLN';\r\n// const apiEUR = 'https://api.exchangeratesapi.io/latest?base=EUR';\r\n\r\n\r\nclass Page extends Component {\r\n    state = {\r\n        currency :\"\",\r\n        result:\"\",\r\n        currencyValue1:\"PLN\",\r\n        currencyValue2:\"EUR\",\r\n        inputValue:1,\r\n        inputValueAsync:\"\",\r\n\r\n    }\r\n\r\n    API = `https://api.exchangeratesapi.io/latest?base=${this.state.currencyValue1}`;\r\n\r\n\r\n\r\n    handleCalc = () => {\r\n        const {inputValue,currencyValue2} = this.state;\r\n\r\n        const currency2 = currencyValue2;\r\n        const currency = this.state.currency.rates[currency2];\r\n\r\n        const result = currency * inputValue;\r\n\r\n        this.setState({\r\n            result: result.toFixed(2),\r\n            inputValueAsync:inputValue,\r\n\r\n            \r\n        })\r\n        \r\n    \r\n    }\r\n\r\n    handleValueChange = (e) => {\r\n        this.setState({\r\n            inputValue:e.target.value,\r\n        })\r\n    }\r\n\r\n    handleChangeValue1 = (e) => {\r\n        this.setState({\r\n            currencyValue1:e.target.value,\r\n            result:\"\",\r\n            inputValueAsync:\"\",\r\n        })\r\n    }\r\n    handleChangeValue2 = (e) => {\r\n        this.setState({\r\n            currencyValue2:e.target.value,\r\n            result:\"\",\r\n            inputValueAsync:\"\",\r\n        })\r\n    }\r\n\r\n    handleChangeCurrencies = () => {\r\n        const currency1 = this.state.currencyValue1;\r\n        const currency2 = this.state.currencyValue2;\r\n\r\n        this.setState({\r\n            currencyValue1: currency2,\r\n            currencyValue2: currency1,\r\n            result:\"\",\r\n            inputValueAsync:\"\",\r\n        })\r\n        \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(this.API)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            this.setState({\r\n                currency:response,\r\n            })\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        const api = `https://api.exchangeratesapi.io/latest?base=${this.state.currencyValue1}`;\r\n        fetch(api)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            this.setState({\r\n                currency:response,\r\n            })\r\n        }) \r\n    }\r\n\r\n    \r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"converter\">\r\n                <div className=\"form\">\r\n                    <label>\r\n                        Amount\r\n                    </label>\r\n                    <input type=\"number\" value={this.state.inputValue} onChange={this.handleValueChange}/>\r\n                    <label>\r\n                        From\r\n                    </label>\r\n                    \r\n                    <select onChange={this.handleChangeValue1} id=\"currency1\" value={this.state.currencyValue1}>\r\n                        <option value=\"PLN\">\r\n                            PLN\r\n                        </option>\r\n                        <option value=\"EUR\">EUR\r\n                        \r\n                        </option>\r\n                        <option value=\"GBP\">GBP\r\n                        \r\n                        </option>\r\n                        <option value=\"USD\">USD\r\n                        \r\n                        </option>\r\n                        <option value=\"CHF\">CHF\r\n                        \r\n                        </option>\r\n                    </select>\r\n                    \r\n                    <button onClick={this.handleChangeCurrencies} className=\"arrows\">â‡„</button>\r\n\r\n                    <label>\r\n                        To\r\n                    </label>\r\n                    <select onChange={this.handleChangeValue2} value={this.state.currencyValue2}>\r\n                        <option key=\"PLN\" value=\"PLN\">PLN\r\n                        \r\n                        </option>\r\n                        <option key=\"EUR\" value=\"EUR\">EUR</option>\r\n                        <option value=\"GBP\">GBP\r\n                        \r\n                        </option>\r\n                        <option key=\"USD\" value=\"USD\">USD\r\n                        \r\n                        </option>\r\n                        <option key=\"CHF\" value=\"CHF\">CHF\r\n                        \r\n                        </option>\r\n                    </select>\r\n                    <button onClick={this.handleCalc}>Convert</button>\r\n                </div>\r\n                <div className=\"resultTable\">\r\n                    <h1>{this.state.inputValueAsync} {this.state.result !==\"\" ? this.state.currencyValue1:null} {this.state.result !==\"\" ? \" = \":null} {this.state.result} {this.state.result !==\"\" ? this.state.currencyValue2:null}</h1>\r\n                </div>\r\n                <p className=\"date\">updated in {this.state.currency.date}</p>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Page;","import React, { Component } from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport '../styles/App.css';\nimport Header from './Header';\nimport Page from './Page';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"app\">\n          <Header/>\n          <Page/>\n        </div>\n      </Router>\n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}